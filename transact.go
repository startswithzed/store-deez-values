package main

import (
	"bufio"
	"fmt"
	"net/url"
	"os"
	"sync"
)

type EventType byte

// creating event type enums
const (
	_                     = iota // 0 
	EventDelete EventType = iota // 1
	EventPut                     // 2
)

// event can be a put or del event
type Event struct {
	Sequence  uint64
	EventType EventType
	Key       string
	Value     string
}

// writes events to the database's log 
type TransactionLogger struct {
	events       chan<- Event // write-only channel for sending events
	errors       <-chan error
	lastSequence uint64   // last used event sequence number
	file         *os.File // location of the transaction log
	wg           *sync.WaitGroup 
}

// add a put event to the events channel
func (l *TransactionLogger) WritePut(key, value string) {
	// wg is used to enable graceful shutdown for the logger
  l.wg.Add(1)
  // add event to events channel by url-encoding the value
	l.events <- Event{EventType: EventPut, Key: key, Value: url.QueryEscape(value)}
}

// add a del event to the events channel
func (l *TransactionLogger) WriteDelete(key string) {
	l.wg.Add(1)
	l.events <- Event{EventType: EventDelete, Key: key}
}

func (l *TransactionLogger) Err() <-chan error {
	return l.errors
}

// instantiates a new transaction logger that writes events to file with the specified file name
// returns a reference to the logger
func NewTransactionLogger(filename string) (*TransactionLogger, error) {
	var err error
	// intantiate the logger with a reference to a wait group
  var l TransactionLogger = TransactionLogger{wg: &sync.WaitGroup{}}

	// Open the transaction log file for reading and writing.
	l.file, err = os.OpenFile(filename, os.O_RDWR|os.O_APPEND|os.O_CREATE, 0755)
	
  if err != nil {
		return nil, fmt.Errorf("cannot open transaction log file: %w", err)
	}

	return &l, nil
}

// instantiates the events and the error channels of the logger 
// and writes the events in the log
func (l *TransactionLogger) Run() {
  // buffered events channel to allow more than one request to be processed at a time
	events := make(chan Event, 16)
	l.events = events

  // buffered error channel to allow handling one error without blocking 
	errors := make(chan error, 1)
	l.errors = errors

	// write events to the log concurrently
  // this goroutine won't exit until the events channel is closed
	go func() {
		for e := range events {
      // increment the last sequence for every new event
			l.lastSequence++

      // write event to file
			_, err := fmt.Fprintf(
				l.file,
				"%d\t%d\t%s\t%s\n",
				l.lastSequence, e.EventType, e.Key, e.Value)

			if err != nil {
				errors <- fmt.Errorf("cannot write to log file: %w", err)
			}

      // decrement wait group counter as event was successfully written to the log 
			l.wg.Done()
		}
	}()
}

func (l *TransactionLogger) Wait() {
	l.wg.Wait()
}

func (l *TransactionLogger) Close() error {
	// waits for all events to be processed and counter to drop to zero
  l.wg.Wait()

	if l.events != nil {
		close(l.events) // terminates Run loop and goroutine
	}

	return l.file.Close()
}

// read events from the log to recreate the database state
// returns events and errors channel
func (l *TransactionLogger) ReadEvents() (<-chan Event, <-chan error) {
	scanner := bufio.NewScanner(l.file)
	 
  outEvent := make(chan Event)
	// the function that creates the goroutine 
  // is also responsible for handling the errors generated by it
  outError := make(chan error, 1)

  // this goroutine will exit after all lines have been read from the log
  go func() {
		var e Event

		defer close(outEvent)
		defer close(outError)

    // read the log line by line
		for scanner.Scan() {
			line := scanner.Text()

      // create a event from the string
			fmt.Sscanf(
				line, "%d\t%d\t%s\t%s",
				&e.Sequence, &e.EventType, &e.Key, &e.Value)

      // check if events are in correct order
			if l.lastSequence >= e.Sequence {
				outError <- fmt.Errorf("transaction numbers out of sequence")
				return
			}

      // url-decode value 
			uv, err := url.QueryUnescape(e.Value)
			
      if err != nil {
				outError <- fmt.Errorf("value decoding failure: %w", err)
				return
			}

			e.Value = uv
			l.lastSequence = e.Sequence

			outEvent <- e
		}

		if err := scanner.Err(); err != nil {
			outError <- fmt.Errorf("transaction log read failure: %w", err)
		}
	}()

	return outEvent, outError
}